//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerThird"",
            ""id"": ""075ec289-1fc7-417d-af9b-af4759989350"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""5bebd4fe-e1a1-4f4d-8b73-585e79a11642"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7257669c-dbbe-4107-aafe-75901c7f7356"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerTop"",
            ""id"": ""0fae9da2-1901-4237-b840-88f81cc10e0b"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""263c46ef-8530-4d42-a7ab-b8421577cc59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""933cc4fe-20b3-469c-ad1b-19ff22c0e458"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""188cb7af-eba0-4370-99f0-681dc6ab38a6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NormalShoot"",
                    ""type"": ""Button"",
                    ""id"": ""9d0866e0-abec-4cb8-aeb4-d0ef24bd6556"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00c46c16-cc51-4481-9977-7e891d08af91"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae48b486-6e26-463f-b59c-6603a1a5a914"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""46018e52-9aae-4d06-ac62-420a8e65ada4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""576189f1-0ed9-44be-8769-cc119103150e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69efe525-aae7-4bd8-91af-aba3a72b4287"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b22c807-5e00-43e3-8c77-61e7771fd151"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7109cce4-af85-4196-8671-ff78932bd4d8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7f0b5240-22a9-4087-a7b6-cbfe53177c3d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerTop"",
            ""bindingGroup"": ""PlayerTop"",
            ""devices"": []
        }
    ]
}");
        // PlayerThird
        m_PlayerThird = asset.FindActionMap("PlayerThird", throwIfNotFound: true);
        m_PlayerThird_Move = m_PlayerThird.FindAction("Move", throwIfNotFound: true);
        // PlayerTop
        m_PlayerTop = asset.FindActionMap("PlayerTop", throwIfNotFound: true);
        m_PlayerTop_MousePosition = m_PlayerTop.FindAction("MousePosition", throwIfNotFound: true);
        m_PlayerTop_MouseDelta = m_PlayerTop.FindAction("MouseDelta", throwIfNotFound: true);
        m_PlayerTop_Movement = m_PlayerTop.FindAction("Movement", throwIfNotFound: true);
        m_PlayerTop_NormalShoot = m_PlayerTop.FindAction("NormalShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerThird
    private readonly InputActionMap m_PlayerThird;
    private List<IPlayerThirdActions> m_PlayerThirdActionsCallbackInterfaces = new List<IPlayerThirdActions>();
    private readonly InputAction m_PlayerThird_Move;
    public struct PlayerThirdActions
    {
        private @Controls m_Wrapper;
        public PlayerThirdActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerThird_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerThird; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerThirdActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerThirdActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerThirdActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerThirdActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerThirdActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerThirdActions instance)
        {
            if (m_Wrapper.m_PlayerThirdActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerThirdActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerThirdActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerThirdActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerThirdActions @PlayerThird => new PlayerThirdActions(this);

    // PlayerTop
    private readonly InputActionMap m_PlayerTop;
    private List<IPlayerTopActions> m_PlayerTopActionsCallbackInterfaces = new List<IPlayerTopActions>();
    private readonly InputAction m_PlayerTop_MousePosition;
    private readonly InputAction m_PlayerTop_MouseDelta;
    private readonly InputAction m_PlayerTop_Movement;
    private readonly InputAction m_PlayerTop_NormalShoot;
    public struct PlayerTopActions
    {
        private @Controls m_Wrapper;
        public PlayerTopActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_PlayerTop_MousePosition;
        public InputAction @MouseDelta => m_Wrapper.m_PlayerTop_MouseDelta;
        public InputAction @Movement => m_Wrapper.m_PlayerTop_Movement;
        public InputAction @NormalShoot => m_Wrapper.m_PlayerTop_NormalShoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerTop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerTopActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerTopActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerTopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerTopActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @NormalShoot.started += instance.OnNormalShoot;
            @NormalShoot.performed += instance.OnNormalShoot;
            @NormalShoot.canceled += instance.OnNormalShoot;
        }

        private void UnregisterCallbacks(IPlayerTopActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @NormalShoot.started -= instance.OnNormalShoot;
            @NormalShoot.performed -= instance.OnNormalShoot;
            @NormalShoot.canceled -= instance.OnNormalShoot;
        }

        public void RemoveCallbacks(IPlayerTopActions instance)
        {
            if (m_Wrapper.m_PlayerTopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerTopActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerTopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerTopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerTopActions @PlayerTop => new PlayerTopActions(this);
    private int m_PlayerTopSchemeIndex = -1;
    public InputControlScheme PlayerTopScheme
    {
        get
        {
            if (m_PlayerTopSchemeIndex == -1) m_PlayerTopSchemeIndex = asset.FindControlSchemeIndex("PlayerTop");
            return asset.controlSchemes[m_PlayerTopSchemeIndex];
        }
    }
    public interface IPlayerThirdActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlayerTopActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnNormalShoot(InputAction.CallbackContext context);
    }
}
